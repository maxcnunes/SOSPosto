//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SP.Entities
{
    public partial class bomba
    {
        #region Primitive Properties
    
        public virtual int numBomba
        {
            get;
            set;
        }
    
        public virtual int Tanque_ID
        {
            get { return _tanque_ID; }
            set
            {
                if (_tanque_ID != value)
                {
                    if (tanque != null && tanque.Tanque_ID != value)
                    {
                        tanque = null;
                    }
                    _tanque_ID = value;
                }
            }
        }
        private int _tanque_ID;
    
        public virtual int Bomba_ID
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual tanque tanque
        {
            get { return _tanque; }
            set
            {
                if (!ReferenceEquals(_tanque, value))
                {
                    var previousValue = _tanque;
                    _tanque = value;
                    Fixuptanque(previousValue);
                }
            }
        }
        private tanque _tanque;
    
        public virtual ICollection<itemvenda> itemvenda
        {
            get
            {
                if (_itemvenda == null)
                {
                    var newCollection = new FixupCollection<itemvenda>();
                    newCollection.CollectionChanged += Fixupitemvenda;
                    _itemvenda = newCollection;
                }
                return _itemvenda;
            }
            set
            {
                if (!ReferenceEquals(_itemvenda, value))
                {
                    var previousValue = _itemvenda as FixupCollection<itemvenda>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupitemvenda;
                    }
                    _itemvenda = value;
                    var newValue = value as FixupCollection<itemvenda>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupitemvenda;
                    }
                }
            }
        }
        private ICollection<itemvenda> _itemvenda;

        #endregion
        #region Association Fixup
    
        private void Fixuptanque(tanque previousValue)
        {
            if (previousValue != null && previousValue.bomba.Contains(this))
            {
                previousValue.bomba.Remove(this);
            }
    
            if (tanque != null)
            {
                if (!tanque.bomba.Contains(this))
                {
                    tanque.bomba.Add(this);
                }
                if (Tanque_ID != tanque.Tanque_ID)
                {
                    Tanque_ID = tanque.Tanque_ID;
                }
            }
        }
    
        private void Fixupitemvenda(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (itemvenda item in e.NewItems)
                {
                    item.bomba = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (itemvenda item in e.OldItems)
                {
                    if (ReferenceEquals(item.bomba, this))
                    {
                        item.bomba = null;
                    }
                }
            }
        }

        #endregion
    }
}
